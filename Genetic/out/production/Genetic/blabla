 //linear Scaling. x ′ = ( x − x m i n ) / ( x m a x − x m i n ).
    /*private double linearNormalize(double fitnessScore, ArrayList<Double> sortedFitnessValues) {
        //linear normalization formula
        double minValue = sortedFitnessValues.get(sortedFitnessValues.size() - 1);
        double maxValue = sortedFitnessValues.get(0);
        double normalizedValue = ((fitnessScore - minValue)) / (maxValue - minValue);  //like this?
        return normalizedValue;
    }*/

 public  int constantValue = 1000;
  ArrayList<double[]> rank_values = new ArrayList<>(); //pairs of the rank and the fitness score
         // iterate trough the population

 for (Graph graph : population) {
            // double normalizedValue = linearNormalize(graph.fitnessScore,fitness_values);
             graph.setRank( constantValue,graph.fitnessScore); //
             //IT SAYS THE BEST CHROMOSOME GETS A CONSTANT
             constantValue-=2;
             rank_values.add(graph.getRank());

         }
         return rank_values;

 //mutate edge is not neded initially // save for later testing may be useful
     // public Collection<Graph> mutateEdge() {
     //    Collection<Graph> m = selection();
     // for (Graph mutant : m) {
     //        // get a random edge and move it to a random location
     //        Node[] edge = mutant.getEdges().get(random.nextInt(mutant.getEdges().size()));
     //        edge[1] = Node.moveNode(edge[0], panel.getWidth(), panel.getHeight()); // also switch nodes ;)
     //        edge[0] = Node.moveNode(edge[1], panel.getWidth(), panel.getHeight());
     //
     //    }
     //    return m; //return the mutated population
     //}


  public void setRank(double rank, double value) {
        this.rank[0] =rank;
        this.rank[1] =value;
    }

    public double[] getRank() {
        return rank;
    }


    //////
     public Graph mutation() {

            Node random_node = this.getRandomNode();
            for ( int i=0 ; i < edges.size(); i++) {
                double angle=random.nextDouble(180);
                if( this.edges.get(i)[0] == random_node || random_node == this.edges.get(i)[1])
                {
                    //get the pair [random_node, some other_node]
                    double radius = Node.euclideanDistance(this.edges.get(i)[0],this.edges.get(i)[1]);
                    double newX = (radius * Math.cos( angle * Math.PI / 180)) + (random_node.x);
                    double newY = (radius * Math.sin(angle* Math.PI / 180)) + (random_node.y);
                    random_node.moveNode( newX,newY);
                }

            }

            this.fitnessScore = fitnessEvaluation();

            return this;



       public  Node moveNode( double value1, double value2)
         {
             this.x = value1; // move the node to a random position according width
             this.y =value2; // move the node to a random position according height
             return this;
         }

